priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49


###########################################################################
#			    Custom
###########################################################################
# Defined by me TODO: (`HUT`) : make this easier to find

snippet ifile "file read"
#include <iostream>
#include <fstream>
#include <string>

std::string line;
std::ifstream myfile ("example.txt");
if (myfile.is_open())
{
	while ( std::getline (myfile,line) )
	{
		std::cout << line << '\n';
	}
	myfile.close();
endsnippet

snippet asy "std::to_string"
std::async(std::launch::async, [](){${1}});
endsnippet

snippet fora "std::to_string"
for(auto &i : ${1})
{
}
endsnippet

snippet tostring "std::to_string"
std::to_string(${1});
endsnippet

snippet for "for loop (for)"
for (std::size_t ${2:i} = 0; $2 < ${1:count}; ${3:++$2})
{
	${VISUAL}$0
}
endsnippet

snippet iter "iterator for loop (for)"
for (auto i = ${1:count}.begin(); i != $1.end(); ) {
	i++;
}
endsnippet

snippet cout "cout"
std::cout << ${1} << std::endl;
endsnippet

snippet cerr "cerr"
std::cerr << ${1} << std::endl;
endsnippet

snippet << "endl"
<< std::endl;
endsnippet

snippet endl "std::endl"
std::endl;
endsnippet

snippet find "find string in vector"
if (std::find(v.begin(), v.end(), "abc") != v.end()) { /* found */ }
endsnippet

# test stuff
snippet itera "C++-11 auto iterator"
for (auto ${1:i} = $1.begin(); $1 != $1.end(); ++$1) {
	${2:std::cout << *$1 << std::endl;}${0}
}
endsnippet

# logging
snippet info "logger.info"
fetch::logger.Info("${1:sample}");
endsnippet

snippet debug "logger.debug"
fetch::logger.Debug("${1:sample}");
endsnippet

snippet template "template"
template <typename T>
endsnippet

snippet siz "size_t"
std::size_t
endsnippet

# delete move and copy operations
snippet nomove "C++ no move or copy"
${1:ClassName}($1 const &rhs)            = delete;
$1($1 &&rhs)                 = delete;
$1 &operator=($1 const &rhs) = delete;
$1 &operator=($1&& rhs)      = delete;
endsnippet

# Reveal type
snippet whattype "force compiler error and reveal type"
typename decltype(${1:TYPENAME})::_;
std::cout << ">TypeID is " << typeid(${1}).name() << std::endl;
endsnippet

#lock guard
snippet lockg "lockguard"
std::lock_guard<fetch::mutex::Mutex> lock(${1:mutex_});
endsnippet

#catch exe
snippet trye "trye"
try
{
	${1:codehere}
}
catch (std::exception& e)
{
	std::cerr << e.what() << std::endl;
}
endsnippet

snippet clas "An entire .hpp generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2


namespace fetch
{
namespace XXXX
{

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
public:
	$1()
	{
	}

	$1($1 &rhs)             = delete;
	$1($1 &&rhs)            = delete;
	$1 &operator=($1& rhs)  = delete;
	$1 &operator=($1&& rhs) = delete;

private:
	$3
};

}
}

#endif /* $2 */
endsnippet

snippet sleep "thread sleep"
std::this_thread::sleep_for(std::chrono::milliseconds(${1:100}));
endsnippet

snippet comment "class commenting"
/*
*  ${1}
*/
endsnippet

###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet


snippet dox "Basic c++ doxygen function template" b
/**
 * ${4:brief}
 *
 * @param: `!p write_docstring_args(t[3],snip)`
 *
 * @return: `!p snip.rv = t[1]`
 */
endsnippet

snippet fnc "Basic c++ doxygen function template" b
/**
 * @brief: ${4:brief}
 *
 * @param: `!p write_docstring_args(t[3],snip)`
 *
 * @return: `!p snip.rv = t[1]`
 */
${1:ReturnType} ${2:FunctionName}(${3:param})
{
  ${0:FunctionBody}
}
endsnippet
# vim:ft=snippets:
